// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: expl.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_expl_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_expl_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_expl_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_expl_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[16]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_expl_2eproto;
namespace prism {
class DataRecord;
class DataRecordDefaultTypeInternal;
extern DataRecordDefaultTypeInternal _DataRecord_default_instance_;
class ExplGraph;
class ExplGraphDefaultTypeInternal;
extern ExplGraphDefaultTypeInternal _ExplGraph_default_instance_;
class ExplGraphGoal;
class ExplGraphGoalDefaultTypeInternal;
extern ExplGraphGoalDefaultTypeInternal _ExplGraphGoal_default_instance_;
class ExplGraphNode;
class ExplGraphNodeDefaultTypeInternal;
extern ExplGraphNodeDefaultTypeInternal _ExplGraphNode_default_instance_;
class ExplGraphPath;
class ExplGraphPathDefaultTypeInternal;
extern ExplGraphPathDefaultTypeInternal _ExplGraphPath_default_instance_;
class Flag;
class FlagDefaultTypeInternal;
extern FlagDefaultTypeInternal _Flag_default_instance_;
class GoalTerm;
class GoalTermDefaultTypeInternal;
extern GoalTermDefaultTypeInternal _GoalTerm_default_instance_;
class IndexRange;
class IndexRangeDefaultTypeInternal;
extern IndexRangeDefaultTypeInternal _IndexRange_default_instance_;
class Option;
class OptionDefaultTypeInternal;
extern OptionDefaultTypeInternal _Option_default_instance_;
class Placeholder;
class PlaceholderDefaultTypeInternal;
extern PlaceholderDefaultTypeInternal _Placeholder_default_instance_;
class PlaceholderData;
class PlaceholderDataDefaultTypeInternal;
extern PlaceholderDataDefaultTypeInternal _PlaceholderData_default_instance_;
class PlaceholderGoal;
class PlaceholderGoalDefaultTypeInternal;
extern PlaceholderGoalDefaultTypeInternal _PlaceholderGoal_default_instance_;
class RankRoot;
class RankRootDefaultTypeInternal;
extern RankRootDefaultTypeInternal _RankRoot_default_instance_;
class Root;
class RootDefaultTypeInternal;
extern RootDefaultTypeInternal _Root_default_instance_;
class SwIns;
class SwInsDefaultTypeInternal;
extern SwInsDefaultTypeInternal _SwIns_default_instance_;
class TensorShape;
class TensorShapeDefaultTypeInternal;
extern TensorShapeDefaultTypeInternal _TensorShape_default_instance_;
}  // namespace prism
PROTOBUF_NAMESPACE_OPEN
template<> ::prism::DataRecord* Arena::CreateMaybeMessage<::prism::DataRecord>(Arena*);
template<> ::prism::ExplGraph* Arena::CreateMaybeMessage<::prism::ExplGraph>(Arena*);
template<> ::prism::ExplGraphGoal* Arena::CreateMaybeMessage<::prism::ExplGraphGoal>(Arena*);
template<> ::prism::ExplGraphNode* Arena::CreateMaybeMessage<::prism::ExplGraphNode>(Arena*);
template<> ::prism::ExplGraphPath* Arena::CreateMaybeMessage<::prism::ExplGraphPath>(Arena*);
template<> ::prism::Flag* Arena::CreateMaybeMessage<::prism::Flag>(Arena*);
template<> ::prism::GoalTerm* Arena::CreateMaybeMessage<::prism::GoalTerm>(Arena*);
template<> ::prism::IndexRange* Arena::CreateMaybeMessage<::prism::IndexRange>(Arena*);
template<> ::prism::Option* Arena::CreateMaybeMessage<::prism::Option>(Arena*);
template<> ::prism::Placeholder* Arena::CreateMaybeMessage<::prism::Placeholder>(Arena*);
template<> ::prism::PlaceholderData* Arena::CreateMaybeMessage<::prism::PlaceholderData>(Arena*);
template<> ::prism::PlaceholderGoal* Arena::CreateMaybeMessage<::prism::PlaceholderGoal>(Arena*);
template<> ::prism::RankRoot* Arena::CreateMaybeMessage<::prism::RankRoot>(Arena*);
template<> ::prism::Root* Arena::CreateMaybeMessage<::prism::Root>(Arena*);
template<> ::prism::SwIns* Arena::CreateMaybeMessage<::prism::SwIns>(Arena*);
template<> ::prism::TensorShape* Arena::CreateMaybeMessage<::prism::TensorShape>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace prism {

enum SwType : int {
  Probabilistic = 0,
  Tensor = 1,
  Operator = 2,
  Layer = 3,
  SwType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SwType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SwType_IsValid(int value);
constexpr SwType SwType_MIN = Probabilistic;
constexpr SwType SwType_MAX = Layer;
constexpr int SwType_ARRAYSIZE = SwType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SwType_descriptor();
template<typename T>
inline const std::string& SwType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SwType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SwType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SwType_descriptor(), enum_t_value);
}
inline bool SwType_Parse(
    const std::string& name, SwType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SwType>(
    SwType_descriptor(), name, value);
}
// ===================================================================

class PlaceholderData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.PlaceholderData) */ {
 public:
  inline PlaceholderData() : PlaceholderData(nullptr) {};
  virtual ~PlaceholderData();

  PlaceholderData(const PlaceholderData& from);
  PlaceholderData(PlaceholderData&& from) noexcept
    : PlaceholderData() {
    *this = ::std::move(from);
  }

  inline PlaceholderData& operator=(const PlaceholderData& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceholderData& operator=(PlaceholderData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceholderData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceholderData* internal_default_instance() {
    return reinterpret_cast<const PlaceholderData*>(
               &_PlaceholderData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PlaceholderData& a, PlaceholderData& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceholderData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceholderData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceholderData* New() const final {
    return CreateMaybeMessage<PlaceholderData>(nullptr);
  }

  PlaceholderData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceholderData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceholderData& from);
  void MergeFrom(const PlaceholderData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceholderData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.PlaceholderData";
  }
  protected:
  explicit PlaceholderData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoalsFieldNumber = 1,
  };
  // repeated .prism.PlaceholderGoal goals = 1;
  int goals_size() const;
  private:
  int _internal_goals_size() const;
  public:
  void clear_goals();
  ::prism::PlaceholderGoal* mutable_goals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::PlaceholderGoal >*
      mutable_goals();
  private:
  const ::prism::PlaceholderGoal& _internal_goals(int index) const;
  ::prism::PlaceholderGoal* _internal_add_goals();
  public:
  const ::prism::PlaceholderGoal& goals(int index) const;
  ::prism::PlaceholderGoal* add_goals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::PlaceholderGoal >&
      goals() const;

  // @@protoc_insertion_point(class_scope:prism.PlaceholderData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::PlaceholderGoal > goals_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// -------------------------------------------------------------------

class PlaceholderGoal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.PlaceholderGoal) */ {
 public:
  inline PlaceholderGoal() : PlaceholderGoal(nullptr) {};
  virtual ~PlaceholderGoal();

  PlaceholderGoal(const PlaceholderGoal& from);
  PlaceholderGoal(PlaceholderGoal&& from) noexcept
    : PlaceholderGoal() {
    *this = ::std::move(from);
  }

  inline PlaceholderGoal& operator=(const PlaceholderGoal& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlaceholderGoal& operator=(PlaceholderGoal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PlaceholderGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlaceholderGoal* internal_default_instance() {
    return reinterpret_cast<const PlaceholderGoal*>(
               &_PlaceholderGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PlaceholderGoal& a, PlaceholderGoal& b) {
    a.Swap(&b);
  }
  inline void Swap(PlaceholderGoal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlaceholderGoal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlaceholderGoal* New() const final {
    return CreateMaybeMessage<PlaceholderGoal>(nullptr);
  }

  PlaceholderGoal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlaceholderGoal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlaceholderGoal& from);
  void MergeFrom(const PlaceholderGoal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlaceholderGoal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.PlaceholderGoal";
  }
  protected:
  explicit PlaceholderGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlaceholdersFieldNumber = 2,
    kRecordsFieldNumber = 3,
    kIdFieldNumber = 1,
  };
  // repeated .prism.Placeholder placeholders = 2;
  int placeholders_size() const;
  private:
  int _internal_placeholders_size() const;
  public:
  void clear_placeholders();
  ::prism::Placeholder* mutable_placeholders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::Placeholder >*
      mutable_placeholders();
  private:
  const ::prism::Placeholder& _internal_placeholders(int index) const;
  ::prism::Placeholder* _internal_add_placeholders();
  public:
  const ::prism::Placeholder& placeholders(int index) const;
  ::prism::Placeholder* add_placeholders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::Placeholder >&
      placeholders() const;

  // repeated .prism.DataRecord records = 3;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::prism::DataRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::DataRecord >*
      mutable_records();
  private:
  const ::prism::DataRecord& _internal_records(int index) const;
  ::prism::DataRecord* _internal_add_records();
  public:
  const ::prism::DataRecord& records(int index) const;
  ::prism::DataRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::DataRecord >&
      records() const;

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:prism.PlaceholderGoal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::Placeholder > placeholders_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::DataRecord > records_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// -------------------------------------------------------------------

class DataRecord PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.DataRecord) */ {
 public:
  inline DataRecord() : DataRecord(nullptr) {};
  virtual ~DataRecord();

  DataRecord(const DataRecord& from);
  DataRecord(DataRecord&& from) noexcept
    : DataRecord() {
    *this = ::std::move(from);
  }

  inline DataRecord& operator=(const DataRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataRecord& operator=(DataRecord&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataRecord& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataRecord* internal_default_instance() {
    return reinterpret_cast<const DataRecord*>(
               &_DataRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DataRecord& a, DataRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(DataRecord* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataRecord* New() const final {
    return CreateMaybeMessage<DataRecord>(nullptr);
  }

  DataRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataRecord& from);
  void MergeFrom(const DataRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.DataRecord";
  }
  protected:
  explicit DataRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
  };
  // repeated string items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  const std::string& items(int index) const;
  std::string* mutable_items(int index);
  void set_items(int index, const std::string& value);
  void set_items(int index, std::string&& value);
  void set_items(int index, const char* value);
  void set_items(int index, const char* value, size_t size);
  std::string* add_items();
  void add_items(const std::string& value);
  void add_items(std::string&& value);
  void add_items(const char* value);
  void add_items(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& items() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_items();
  private:
  const std::string& _internal_items(int index) const;
  std::string* _internal_add_items();
  public:

  // @@protoc_insertion_point(class_scope:prism.DataRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// -------------------------------------------------------------------

class Placeholder PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.Placeholder) */ {
 public:
  inline Placeholder() : Placeholder(nullptr) {};
  virtual ~Placeholder();

  Placeholder(const Placeholder& from);
  Placeholder(Placeholder&& from) noexcept
    : Placeholder() {
    *this = ::std::move(from);
  }

  inline Placeholder& operator=(const Placeholder& from) {
    CopyFrom(from);
    return *this;
  }
  inline Placeholder& operator=(Placeholder&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Placeholder& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Placeholder* internal_default_instance() {
    return reinterpret_cast<const Placeholder*>(
               &_Placeholder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Placeholder& a, Placeholder& b) {
    a.Swap(&b);
  }
  inline void Swap(Placeholder* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Placeholder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Placeholder* New() const final {
    return CreateMaybeMessage<Placeholder>(nullptr);
  }

  Placeholder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Placeholder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Placeholder& from);
  void MergeFrom(const Placeholder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Placeholder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.Placeholder";
  }
  protected:
  explicit Placeholder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:prism.Placeholder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// -------------------------------------------------------------------

class Option PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.Option) */ {
 public:
  inline Option() : Option(nullptr) {};
  virtual ~Option();

  Option(const Option& from);
  Option(Option&& from) noexcept
    : Option() {
    *this = ::std::move(from);
  }

  inline Option& operator=(const Option& from) {
    CopyFrom(from);
    return *this;
  }
  inline Option& operator=(Option&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Option& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Option* internal_default_instance() {
    return reinterpret_cast<const Option*>(
               &_Option_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Option& a, Option& b) {
    a.Swap(&b);
  }
  inline void Swap(Option* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Option* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Option* New() const final {
    return CreateMaybeMessage<Option>(nullptr);
  }

  Option* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Option>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Option& from);
  void MergeFrom(const Option& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Option* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.Option";
  }
  protected:
  explicit Option(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlagsFieldNumber = 1,
    kIndexRangeFieldNumber = 2,
    kTensorShapeFieldNumber = 3,
  };
  // repeated .prism.Flag flags = 1;
  int flags_size() const;
  private:
  int _internal_flags_size() const;
  public:
  void clear_flags();
  ::prism::Flag* mutable_flags(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::Flag >*
      mutable_flags();
  private:
  const ::prism::Flag& _internal_flags(int index) const;
  ::prism::Flag* _internal_add_flags();
  public:
  const ::prism::Flag& flags(int index) const;
  ::prism::Flag* add_flags();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::Flag >&
      flags() const;

  // repeated .prism.IndexRange index_range = 2;
  int index_range_size() const;
  private:
  int _internal_index_range_size() const;
  public:
  void clear_index_range();
  ::prism::IndexRange* mutable_index_range(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::IndexRange >*
      mutable_index_range();
  private:
  const ::prism::IndexRange& _internal_index_range(int index) const;
  ::prism::IndexRange* _internal_add_index_range();
  public:
  const ::prism::IndexRange& index_range(int index) const;
  ::prism::IndexRange* add_index_range();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::IndexRange >&
      index_range() const;

  // repeated .prism.TensorShape tensor_shape = 3;
  int tensor_shape_size() const;
  private:
  int _internal_tensor_shape_size() const;
  public:
  void clear_tensor_shape();
  ::prism::TensorShape* mutable_tensor_shape(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::TensorShape >*
      mutable_tensor_shape();
  private:
  const ::prism::TensorShape& _internal_tensor_shape(int index) const;
  ::prism::TensorShape* _internal_add_tensor_shape();
  public:
  const ::prism::TensorShape& tensor_shape(int index) const;
  ::prism::TensorShape* add_tensor_shape();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::TensorShape >&
      tensor_shape() const;

  // @@protoc_insertion_point(class_scope:prism.Option)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::Flag > flags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::IndexRange > index_range_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::TensorShape > tensor_shape_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// -------------------------------------------------------------------

class Flag PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.Flag) */ {
 public:
  inline Flag() : Flag(nullptr) {};
  virtual ~Flag();

  Flag(const Flag& from);
  Flag(Flag&& from) noexcept
    : Flag() {
    *this = ::std::move(from);
  }

  inline Flag& operator=(const Flag& from) {
    CopyFrom(from);
    return *this;
  }
  inline Flag& operator=(Flag&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Flag& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Flag* internal_default_instance() {
    return reinterpret_cast<const Flag*>(
               &_Flag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Flag& a, Flag& b) {
    a.Swap(&b);
  }
  inline void Swap(Flag* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Flag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Flag* New() const final {
    return CreateMaybeMessage<Flag>(nullptr);
  }

  Flag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Flag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Flag& from);
  void MergeFrom(const Flag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Flag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.Flag";
  }
  protected:
  explicit Flag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:prism.Flag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// -------------------------------------------------------------------

class IndexRange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.IndexRange) */ {
 public:
  inline IndexRange() : IndexRange(nullptr) {};
  virtual ~IndexRange();

  IndexRange(const IndexRange& from);
  IndexRange(IndexRange&& from) noexcept
    : IndexRange() {
    *this = ::std::move(from);
  }

  inline IndexRange& operator=(const IndexRange& from) {
    CopyFrom(from);
    return *this;
  }
  inline IndexRange& operator=(IndexRange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const IndexRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IndexRange* internal_default_instance() {
    return reinterpret_cast<const IndexRange*>(
               &_IndexRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(IndexRange& a, IndexRange& b) {
    a.Swap(&b);
  }
  inline void Swap(IndexRange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IndexRange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IndexRange* New() const final {
    return CreateMaybeMessage<IndexRange>(nullptr);
  }

  IndexRange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IndexRange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const IndexRange& from);
  void MergeFrom(const IndexRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IndexRange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.IndexRange";
  }
  protected:
  explicit IndexRange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIndexFieldNumber = 1,
    kRangeFieldNumber = 2,
  };
  // string index = 1;
  void clear_index();
  const std::string& index() const;
  void set_index(const std::string& value);
  void set_index(std::string&& value);
  void set_index(const char* value);
  void set_index(const char* value, size_t size);
  std::string* mutable_index();
  std::string* release_index();
  void set_allocated_index(std::string* index);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_index();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_index(
      std::string* index);
  private:
  const std::string& _internal_index() const;
  void _internal_set_index(const std::string& value);
  std::string* _internal_mutable_index();
  public:

  // int32 range = 2;
  void clear_range();
  ::PROTOBUF_NAMESPACE_ID::int32 range() const;
  void set_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_range() const;
  void _internal_set_range(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:prism.IndexRange)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr index_;
  ::PROTOBUF_NAMESPACE_ID::int32 range_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// -------------------------------------------------------------------

class TensorShape PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.TensorShape) */ {
 public:
  inline TensorShape() : TensorShape(nullptr) {};
  virtual ~TensorShape();

  TensorShape(const TensorShape& from);
  TensorShape(TensorShape&& from) noexcept
    : TensorShape() {
    *this = ::std::move(from);
  }

  inline TensorShape& operator=(const TensorShape& from) {
    CopyFrom(from);
    return *this;
  }
  inline TensorShape& operator=(TensorShape&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TensorShape& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TensorShape* internal_default_instance() {
    return reinterpret_cast<const TensorShape*>(
               &_TensorShape_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TensorShape& a, TensorShape& b) {
    a.Swap(&b);
  }
  inline void Swap(TensorShape* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TensorShape* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TensorShape* New() const final {
    return CreateMaybeMessage<TensorShape>(nullptr);
  }

  TensorShape* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TensorShape>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TensorShape& from);
  void MergeFrom(const TensorShape& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TensorShape* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.TensorShape";
  }
  protected:
  explicit TensorShape(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShapeFieldNumber = 2,
    kTensorNameFieldNumber = 1,
    kTypeFieldNumber = 3,
  };
  // repeated int32 shape = 2;
  int shape_size() const;
  private:
  int _internal_shape_size() const;
  public:
  void clear_shape();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shape(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_shape() const;
  void _internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_shape();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 shape(int index) const;
  void set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_shape(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      shape() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_shape();

  // string tensor_name = 1;
  void clear_tensor_name();
  const std::string& tensor_name() const;
  void set_tensor_name(const std::string& value);
  void set_tensor_name(std::string&& value);
  void set_tensor_name(const char* value);
  void set_tensor_name(const char* value, size_t size);
  std::string* mutable_tensor_name();
  std::string* release_tensor_name();
  void set_allocated_tensor_name(std::string* tensor_name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tensor_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tensor_name(
      std::string* tensor_name);
  private:
  const std::string& _internal_tensor_name() const;
  void _internal_set_tensor_name(const std::string& value);
  std::string* _internal_mutable_tensor_name();
  public:

  // string type = 3;
  void clear_type();
  const std::string& type() const;
  void set_type(const std::string& value);
  void set_type(std::string&& value);
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  std::string* mutable_type();
  std::string* release_type();
  void set_allocated_type(std::string* type);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_type();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_type(
      std::string* type);
  private:
  const std::string& _internal_type() const;
  void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:prism.TensorShape)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > shape_;
  mutable std::atomic<int> _shape_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tensor_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// -------------------------------------------------------------------

class ExplGraph PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.ExplGraph) */ {
 public:
  inline ExplGraph() : ExplGraph(nullptr) {};
  virtual ~ExplGraph();

  ExplGraph(const ExplGraph& from);
  ExplGraph(ExplGraph&& from) noexcept
    : ExplGraph() {
    *this = ::std::move(from);
  }

  inline ExplGraph& operator=(const ExplGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExplGraph& operator=(ExplGraph&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExplGraph& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExplGraph* internal_default_instance() {
    return reinterpret_cast<const ExplGraph*>(
               &_ExplGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ExplGraph& a, ExplGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(ExplGraph* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExplGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExplGraph* New() const final {
    return CreateMaybeMessage<ExplGraph>(nullptr);
  }

  ExplGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExplGraph>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExplGraph& from);
  void MergeFrom(const ExplGraph& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExplGraph* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.ExplGraph";
  }
  protected:
  explicit ExplGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoalsFieldNumber = 1,
    kRootListFieldNumber = 2,
  };
  // repeated .prism.ExplGraphGoal goals = 1;
  int goals_size() const;
  private:
  int _internal_goals_size() const;
  public:
  void clear_goals();
  ::prism::ExplGraphGoal* mutable_goals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::ExplGraphGoal >*
      mutable_goals();
  private:
  const ::prism::ExplGraphGoal& _internal_goals(int index) const;
  ::prism::ExplGraphGoal* _internal_add_goals();
  public:
  const ::prism::ExplGraphGoal& goals(int index) const;
  ::prism::ExplGraphGoal* add_goals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::ExplGraphGoal >&
      goals() const;

  // repeated .prism.RankRoot root_list = 2;
  int root_list_size() const;
  private:
  int _internal_root_list_size() const;
  public:
  void clear_root_list();
  ::prism::RankRoot* mutable_root_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::RankRoot >*
      mutable_root_list();
  private:
  const ::prism::RankRoot& _internal_root_list(int index) const;
  ::prism::RankRoot* _internal_add_root_list();
  public:
  const ::prism::RankRoot& root_list(int index) const;
  ::prism::RankRoot* add_root_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::RankRoot >&
      root_list() const;

  // @@protoc_insertion_point(class_scope:prism.ExplGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::ExplGraphGoal > goals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::RankRoot > root_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// -------------------------------------------------------------------

class ExplGraphGoal PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.ExplGraphGoal) */ {
 public:
  inline ExplGraphGoal() : ExplGraphGoal(nullptr) {};
  virtual ~ExplGraphGoal();

  ExplGraphGoal(const ExplGraphGoal& from);
  ExplGraphGoal(ExplGraphGoal&& from) noexcept
    : ExplGraphGoal() {
    *this = ::std::move(from);
  }

  inline ExplGraphGoal& operator=(const ExplGraphGoal& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExplGraphGoal& operator=(ExplGraphGoal&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExplGraphGoal& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExplGraphGoal* internal_default_instance() {
    return reinterpret_cast<const ExplGraphGoal*>(
               &_ExplGraphGoal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ExplGraphGoal& a, ExplGraphGoal& b) {
    a.Swap(&b);
  }
  inline void Swap(ExplGraphGoal* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExplGraphGoal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExplGraphGoal* New() const final {
    return CreateMaybeMessage<ExplGraphGoal>(nullptr);
  }

  ExplGraphGoal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExplGraphGoal>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExplGraphGoal& from);
  void MergeFrom(const ExplGraphGoal& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExplGraphGoal* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.ExplGraphGoal";
  }
  protected:
  explicit ExplGraphGoal(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPathsFieldNumber = 2,
    kNodeFieldNumber = 1,
  };
  // repeated .prism.ExplGraphPath paths = 2;
  int paths_size() const;
  private:
  int _internal_paths_size() const;
  public:
  void clear_paths();
  ::prism::ExplGraphPath* mutable_paths(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::ExplGraphPath >*
      mutable_paths();
  private:
  const ::prism::ExplGraphPath& _internal_paths(int index) const;
  ::prism::ExplGraphPath* _internal_add_paths();
  public:
  const ::prism::ExplGraphPath& paths(int index) const;
  ::prism::ExplGraphPath* add_paths();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::ExplGraphPath >&
      paths() const;

  // .prism.ExplGraphNode node = 1;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::prism::ExplGraphNode& node() const;
  ::prism::ExplGraphNode* release_node();
  ::prism::ExplGraphNode* mutable_node();
  void set_allocated_node(::prism::ExplGraphNode* node);
  private:
  const ::prism::ExplGraphNode& _internal_node() const;
  ::prism::ExplGraphNode* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::prism::ExplGraphNode* node);
  ::prism::ExplGraphNode* unsafe_arena_release_node();

  // @@protoc_insertion_point(class_scope:prism.ExplGraphGoal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::ExplGraphPath > paths_;
  ::prism::ExplGraphNode* node_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// -------------------------------------------------------------------

class ExplGraphPath PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.ExplGraphPath) */ {
 public:
  inline ExplGraphPath() : ExplGraphPath(nullptr) {};
  virtual ~ExplGraphPath();

  ExplGraphPath(const ExplGraphPath& from);
  ExplGraphPath(ExplGraphPath&& from) noexcept
    : ExplGraphPath() {
    *this = ::std::move(from);
  }

  inline ExplGraphPath& operator=(const ExplGraphPath& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExplGraphPath& operator=(ExplGraphPath&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExplGraphPath& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExplGraphPath* internal_default_instance() {
    return reinterpret_cast<const ExplGraphPath*>(
               &_ExplGraphPath_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ExplGraphPath& a, ExplGraphPath& b) {
    a.Swap(&b);
  }
  inline void Swap(ExplGraphPath* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExplGraphPath* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExplGraphPath* New() const final {
    return CreateMaybeMessage<ExplGraphPath>(nullptr);
  }

  ExplGraphPath* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExplGraphPath>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExplGraphPath& from);
  void MergeFrom(const ExplGraphPath& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExplGraphPath* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.ExplGraphPath";
  }
  protected:
  explicit ExplGraphPath(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNodesFieldNumber = 1,
    kProbSwitchesFieldNumber = 2,
    kTensorSwitchesFieldNumber = 3,
    kOperatorsFieldNumber = 4,
    kLayersFieldNumber = 5,
  };
  // repeated .prism.ExplGraphNode nodes = 1;
  int nodes_size() const;
  private:
  int _internal_nodes_size() const;
  public:
  void clear_nodes();
  ::prism::ExplGraphNode* mutable_nodes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::ExplGraphNode >*
      mutable_nodes();
  private:
  const ::prism::ExplGraphNode& _internal_nodes(int index) const;
  ::prism::ExplGraphNode* _internal_add_nodes();
  public:
  const ::prism::ExplGraphNode& nodes(int index) const;
  ::prism::ExplGraphNode* add_nodes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::ExplGraphNode >&
      nodes() const;

  // repeated .prism.SwIns prob_switches = 2;
  int prob_switches_size() const;
  private:
  int _internal_prob_switches_size() const;
  public:
  void clear_prob_switches();
  ::prism::SwIns* mutable_prob_switches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >*
      mutable_prob_switches();
  private:
  const ::prism::SwIns& _internal_prob_switches(int index) const;
  ::prism::SwIns* _internal_add_prob_switches();
  public:
  const ::prism::SwIns& prob_switches(int index) const;
  ::prism::SwIns* add_prob_switches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >&
      prob_switches() const;

  // repeated .prism.SwIns tensor_switches = 3;
  int tensor_switches_size() const;
  private:
  int _internal_tensor_switches_size() const;
  public:
  void clear_tensor_switches();
  ::prism::SwIns* mutable_tensor_switches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >*
      mutable_tensor_switches();
  private:
  const ::prism::SwIns& _internal_tensor_switches(int index) const;
  ::prism::SwIns* _internal_add_tensor_switches();
  public:
  const ::prism::SwIns& tensor_switches(int index) const;
  ::prism::SwIns* add_tensor_switches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >&
      tensor_switches() const;

  // repeated .prism.SwIns operators = 4;
  int operators_size() const;
  private:
  int _internal_operators_size() const;
  public:
  void clear_operators();
  ::prism::SwIns* mutable_operators(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >*
      mutable_operators();
  private:
  const ::prism::SwIns& _internal_operators(int index) const;
  ::prism::SwIns* _internal_add_operators();
  public:
  const ::prism::SwIns& operators(int index) const;
  ::prism::SwIns* add_operators();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >&
      operators() const;

  // repeated .prism.SwIns layers = 5;
  int layers_size() const;
  private:
  int _internal_layers_size() const;
  public:
  void clear_layers();
  ::prism::SwIns* mutable_layers(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >*
      mutable_layers();
  private:
  const ::prism::SwIns& _internal_layers(int index) const;
  ::prism::SwIns* _internal_add_layers();
  public:
  const ::prism::SwIns& layers(int index) const;
  ::prism::SwIns* add_layers();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >&
      layers() const;

  // @@protoc_insertion_point(class_scope:prism.ExplGraphPath)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::ExplGraphNode > nodes_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns > prob_switches_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns > tensor_switches_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns > operators_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns > layers_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// -------------------------------------------------------------------

class ExplGraphNode PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.ExplGraphNode) */ {
 public:
  inline ExplGraphNode() : ExplGraphNode(nullptr) {};
  virtual ~ExplGraphNode();

  ExplGraphNode(const ExplGraphNode& from);
  ExplGraphNode(ExplGraphNode&& from) noexcept
    : ExplGraphNode() {
    *this = ::std::move(from);
  }

  inline ExplGraphNode& operator=(const ExplGraphNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExplGraphNode& operator=(ExplGraphNode&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ExplGraphNode& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExplGraphNode* internal_default_instance() {
    return reinterpret_cast<const ExplGraphNode*>(
               &_ExplGraphNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ExplGraphNode& a, ExplGraphNode& b) {
    a.Swap(&b);
  }
  inline void Swap(ExplGraphNode* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExplGraphNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExplGraphNode* New() const final {
    return CreateMaybeMessage<ExplGraphNode>(nullptr);
  }

  ExplGraphNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExplGraphNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExplGraphNode& from);
  void MergeFrom(const ExplGraphNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExplGraphNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.ExplGraphNode";
  }
  protected:
  explicit ExplGraphNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoalFieldNumber = 3,
    kIdFieldNumber = 1,
    kSortedIdFieldNumber = 2,
  };
  // .prism.GoalTerm goal = 3;
  bool has_goal() const;
  private:
  bool _internal_has_goal() const;
  public:
  void clear_goal();
  const ::prism::GoalTerm& goal() const;
  ::prism::GoalTerm* release_goal();
  ::prism::GoalTerm* mutable_goal();
  void set_allocated_goal(::prism::GoalTerm* goal);
  private:
  const ::prism::GoalTerm& _internal_goal() const;
  ::prism::GoalTerm* _internal_mutable_goal();
  public:
  void unsafe_arena_set_allocated_goal(
      ::prism::GoalTerm* goal);
  ::prism::GoalTerm* unsafe_arena_release_goal();

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sorted_id = 2;
  void clear_sorted_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sorted_id() const;
  void set_sorted_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sorted_id() const;
  void _internal_set_sorted_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:prism.ExplGraphNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::prism::GoalTerm* goal_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sorted_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// -------------------------------------------------------------------

class GoalTerm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.GoalTerm) */ {
 public:
  inline GoalTerm() : GoalTerm(nullptr) {};
  virtual ~GoalTerm();

  GoalTerm(const GoalTerm& from);
  GoalTerm(GoalTerm&& from) noexcept
    : GoalTerm() {
    *this = ::std::move(from);
  }

  inline GoalTerm& operator=(const GoalTerm& from) {
    CopyFrom(from);
    return *this;
  }
  inline GoalTerm& operator=(GoalTerm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GoalTerm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GoalTerm* internal_default_instance() {
    return reinterpret_cast<const GoalTerm*>(
               &_GoalTerm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GoalTerm& a, GoalTerm& b) {
    a.Swap(&b);
  }
  inline void Swap(GoalTerm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GoalTerm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GoalTerm* New() const final {
    return CreateMaybeMessage<GoalTerm>(nullptr);
  }

  GoalTerm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GoalTerm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GoalTerm& from);
  void MergeFrom(const GoalTerm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GoalTerm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.GoalTerm";
  }
  protected:
  explicit GoalTerm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // repeated string args = 2;
  int args_size() const;
  private:
  int _internal_args_size() const;
  public:
  void clear_args();
  const std::string& args(int index) const;
  std::string* mutable_args(int index);
  void set_args(int index, const std::string& value);
  void set_args(int index, std::string&& value);
  void set_args(int index, const char* value);
  void set_args(int index, const char* value, size_t size);
  std::string* add_args();
  void add_args(const std::string& value);
  void add_args(std::string&& value);
  void add_args(const char* value);
  void add_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_args();
  private:
  const std::string& _internal_args(int index) const;
  std::string* _internal_add_args();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:prism.GoalTerm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// -------------------------------------------------------------------

class SwIns PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.SwIns) */ {
 public:
  inline SwIns() : SwIns(nullptr) {};
  virtual ~SwIns();

  SwIns(const SwIns& from);
  SwIns(SwIns&& from) noexcept
    : SwIns() {
    *this = ::std::move(from);
  }

  inline SwIns& operator=(const SwIns& from) {
    CopyFrom(from);
    return *this;
  }
  inline SwIns& operator=(SwIns&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SwIns& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwIns* internal_default_instance() {
    return reinterpret_cast<const SwIns*>(
               &_SwIns_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SwIns& a, SwIns& b) {
    a.Swap(&b);
  }
  inline void Swap(SwIns* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SwIns* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SwIns* New() const final {
    return CreateMaybeMessage<SwIns>(nullptr);
  }

  SwIns* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SwIns>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SwIns& from);
  void MergeFrom(const SwIns& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwIns* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.SwIns";
  }
  protected:
  explicit SwIns(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 3,
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
    kInsideFieldNumber = 4,
    kSwTypeFieldNumber = 5,
  };
  // repeated string values = 3;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  const std::string& values(int index) const;
  std::string* mutable_values(int index);
  void set_values(int index, const std::string& value);
  void set_values(int index, std::string&& value);
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  std::string* add_values();
  void add_values(const std::string& value);
  void add_values(std::string&& value);
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_values();
  private:
  const std::string& _internal_values(int index) const;
  std::string* _internal_add_values();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float inside = 4;
  void clear_inside();
  float inside() const;
  void set_inside(float value);
  private:
  float _internal_inside() const;
  void _internal_set_inside(float value);
  public:

  // .prism.SwType sw_type = 5;
  void clear_sw_type();
  ::prism::SwType sw_type() const;
  void set_sw_type(::prism::SwType value);
  private:
  ::prism::SwType _internal_sw_type() const;
  void _internal_set_sw_type(::prism::SwType value);
  public:

  // @@protoc_insertion_point(class_scope:prism.SwIns)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  float inside_;
  int sw_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// -------------------------------------------------------------------

class Root PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.Root) */ {
 public:
  inline Root() : Root(nullptr) {};
  virtual ~Root();

  Root(const Root& from);
  Root(Root&& from) noexcept
    : Root() {
    *this = ::std::move(from);
  }

  inline Root& operator=(const Root& from) {
    CopyFrom(from);
    return *this;
  }
  inline Root& operator=(Root&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Root& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Root* internal_default_instance() {
    return reinterpret_cast<const Root*>(
               &_Root_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(Root& a, Root& b) {
    a.Swap(&b);
  }
  inline void Swap(Root* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Root* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Root* New() const final {
    return CreateMaybeMessage<Root>(nullptr);
  }

  Root* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Root>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Root& from);
  void MergeFrom(const Root& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Root* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.Root";
  }
  protected:
  explicit Root(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kSortedIdFieldNumber = 2,
  };
  // int32 id = 1;
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sorted_id = 2;
  void clear_sorted_id();
  ::PROTOBUF_NAMESPACE_ID::int32 sorted_id() const;
  void set_sorted_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sorted_id() const;
  void _internal_set_sorted_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:prism.Root)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sorted_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// -------------------------------------------------------------------

class RankRoot PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:prism.RankRoot) */ {
 public:
  inline RankRoot() : RankRoot(nullptr) {};
  virtual ~RankRoot();

  RankRoot(const RankRoot& from);
  RankRoot(RankRoot&& from) noexcept
    : RankRoot() {
    *this = ::std::move(from);
  }

  inline RankRoot& operator=(const RankRoot& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankRoot& operator=(RankRoot&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankRoot& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankRoot* internal_default_instance() {
    return reinterpret_cast<const RankRoot*>(
               &_RankRoot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RankRoot& a, RankRoot& b) {
    a.Swap(&b);
  }
  inline void Swap(RankRoot* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RankRoot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankRoot* New() const final {
    return CreateMaybeMessage<RankRoot>(nullptr);
  }

  RankRoot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankRoot>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankRoot& from);
  void MergeFrom(const RankRoot& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankRoot* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "prism.RankRoot";
  }
  protected:
  explicit RankRoot(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_expl_2eproto);
    return ::descriptor_table_expl_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRootsFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // repeated .prism.Root roots = 1;
  int roots_size() const;
  private:
  int _internal_roots_size() const;
  public:
  void clear_roots();
  ::prism::Root* mutable_roots(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::Root >*
      mutable_roots();
  private:
  const ::prism::Root& _internal_roots(int index) const;
  ::prism::Root* _internal_add_roots();
  public:
  const ::prism::Root& roots(int index) const;
  ::prism::Root* add_roots();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::Root >&
      roots() const;

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:prism.RankRoot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::Root > roots_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_expl_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PlaceholderData

// repeated .prism.PlaceholderGoal goals = 1;
inline int PlaceholderData::_internal_goals_size() const {
  return goals_.size();
}
inline int PlaceholderData::goals_size() const {
  return _internal_goals_size();
}
inline void PlaceholderData::clear_goals() {
  goals_.Clear();
}
inline ::prism::PlaceholderGoal* PlaceholderData::mutable_goals(int index) {
  // @@protoc_insertion_point(field_mutable:prism.PlaceholderData.goals)
  return goals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::PlaceholderGoal >*
PlaceholderData::mutable_goals() {
  // @@protoc_insertion_point(field_mutable_list:prism.PlaceholderData.goals)
  return &goals_;
}
inline const ::prism::PlaceholderGoal& PlaceholderData::_internal_goals(int index) const {
  return goals_.Get(index);
}
inline const ::prism::PlaceholderGoal& PlaceholderData::goals(int index) const {
  // @@protoc_insertion_point(field_get:prism.PlaceholderData.goals)
  return _internal_goals(index);
}
inline ::prism::PlaceholderGoal* PlaceholderData::_internal_add_goals() {
  return goals_.Add();
}
inline ::prism::PlaceholderGoal* PlaceholderData::add_goals() {
  // @@protoc_insertion_point(field_add:prism.PlaceholderData.goals)
  return _internal_add_goals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::PlaceholderGoal >&
PlaceholderData::goals() const {
  // @@protoc_insertion_point(field_list:prism.PlaceholderData.goals)
  return goals_;
}

// -------------------------------------------------------------------

// PlaceholderGoal

// int32 id = 1;
inline void PlaceholderGoal::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaceholderGoal::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlaceholderGoal::id() const {
  // @@protoc_insertion_point(field_get:prism.PlaceholderGoal.id)
  return _internal_id();
}
inline void PlaceholderGoal::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void PlaceholderGoal::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:prism.PlaceholderGoal.id)
}

// repeated .prism.Placeholder placeholders = 2;
inline int PlaceholderGoal::_internal_placeholders_size() const {
  return placeholders_.size();
}
inline int PlaceholderGoal::placeholders_size() const {
  return _internal_placeholders_size();
}
inline void PlaceholderGoal::clear_placeholders() {
  placeholders_.Clear();
}
inline ::prism::Placeholder* PlaceholderGoal::mutable_placeholders(int index) {
  // @@protoc_insertion_point(field_mutable:prism.PlaceholderGoal.placeholders)
  return placeholders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::Placeholder >*
PlaceholderGoal::mutable_placeholders() {
  // @@protoc_insertion_point(field_mutable_list:prism.PlaceholderGoal.placeholders)
  return &placeholders_;
}
inline const ::prism::Placeholder& PlaceholderGoal::_internal_placeholders(int index) const {
  return placeholders_.Get(index);
}
inline const ::prism::Placeholder& PlaceholderGoal::placeholders(int index) const {
  // @@protoc_insertion_point(field_get:prism.PlaceholderGoal.placeholders)
  return _internal_placeholders(index);
}
inline ::prism::Placeholder* PlaceholderGoal::_internal_add_placeholders() {
  return placeholders_.Add();
}
inline ::prism::Placeholder* PlaceholderGoal::add_placeholders() {
  // @@protoc_insertion_point(field_add:prism.PlaceholderGoal.placeholders)
  return _internal_add_placeholders();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::Placeholder >&
PlaceholderGoal::placeholders() const {
  // @@protoc_insertion_point(field_list:prism.PlaceholderGoal.placeholders)
  return placeholders_;
}

// repeated .prism.DataRecord records = 3;
inline int PlaceholderGoal::_internal_records_size() const {
  return records_.size();
}
inline int PlaceholderGoal::records_size() const {
  return _internal_records_size();
}
inline void PlaceholderGoal::clear_records() {
  records_.Clear();
}
inline ::prism::DataRecord* PlaceholderGoal::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:prism.PlaceholderGoal.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::DataRecord >*
PlaceholderGoal::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:prism.PlaceholderGoal.records)
  return &records_;
}
inline const ::prism::DataRecord& PlaceholderGoal::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::prism::DataRecord& PlaceholderGoal::records(int index) const {
  // @@protoc_insertion_point(field_get:prism.PlaceholderGoal.records)
  return _internal_records(index);
}
inline ::prism::DataRecord* PlaceholderGoal::_internal_add_records() {
  return records_.Add();
}
inline ::prism::DataRecord* PlaceholderGoal::add_records() {
  // @@protoc_insertion_point(field_add:prism.PlaceholderGoal.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::DataRecord >&
PlaceholderGoal::records() const {
  // @@protoc_insertion_point(field_list:prism.PlaceholderGoal.records)
  return records_;
}

// -------------------------------------------------------------------

// DataRecord

// repeated string items = 2;
inline int DataRecord::_internal_items_size() const {
  return items_.size();
}
inline int DataRecord::items_size() const {
  return _internal_items_size();
}
inline void DataRecord::clear_items() {
  items_.Clear();
}
inline std::string* DataRecord::add_items() {
  // @@protoc_insertion_point(field_add_mutable:prism.DataRecord.items)
  return _internal_add_items();
}
inline const std::string& DataRecord::_internal_items(int index) const {
  return items_.Get(index);
}
inline const std::string& DataRecord::items(int index) const {
  // @@protoc_insertion_point(field_get:prism.DataRecord.items)
  return _internal_items(index);
}
inline std::string* DataRecord::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:prism.DataRecord.items)
  return items_.Mutable(index);
}
inline void DataRecord::set_items(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:prism.DataRecord.items)
  items_.Mutable(index)->assign(value);
}
inline void DataRecord::set_items(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:prism.DataRecord.items)
  items_.Mutable(index)->assign(std::move(value));
}
inline void DataRecord::set_items(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  items_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:prism.DataRecord.items)
}
inline void DataRecord::set_items(int index, const char* value, size_t size) {
  items_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:prism.DataRecord.items)
}
inline std::string* DataRecord::_internal_add_items() {
  return items_.Add();
}
inline void DataRecord::add_items(const std::string& value) {
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:prism.DataRecord.items)
}
inline void DataRecord::add_items(std::string&& value) {
  items_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:prism.DataRecord.items)
}
inline void DataRecord::add_items(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  items_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:prism.DataRecord.items)
}
inline void DataRecord::add_items(const char* value, size_t size) {
  items_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:prism.DataRecord.items)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DataRecord::items() const {
  // @@protoc_insertion_point(field_list:prism.DataRecord.items)
  return items_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DataRecord::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:prism.DataRecord.items)
  return &items_;
}

// -------------------------------------------------------------------

// Placeholder

// string name = 1;
inline void Placeholder::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Placeholder::name() const {
  // @@protoc_insertion_point(field_get:prism.Placeholder.name)
  return _internal_name();
}
inline void Placeholder::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:prism.Placeholder.name)
}
inline std::string* Placeholder::mutable_name() {
  // @@protoc_insertion_point(field_mutable:prism.Placeholder.name)
  return _internal_mutable_name();
}
inline const std::string& Placeholder::_internal_name() const {
  return name_.Get();
}
inline void Placeholder::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Placeholder::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:prism.Placeholder.name)
}
inline void Placeholder::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:prism.Placeholder.name)
}
inline void Placeholder::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:prism.Placeholder.name)
}
inline std::string* Placeholder::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Placeholder::release_name() {
  // @@protoc_insertion_point(field_release:prism.Placeholder.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Placeholder::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:prism.Placeholder.name)
}
inline std::string* Placeholder::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:prism.Placeholder.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Placeholder::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prism.Placeholder.name)
}

// -------------------------------------------------------------------

// Option

// repeated .prism.Flag flags = 1;
inline int Option::_internal_flags_size() const {
  return flags_.size();
}
inline int Option::flags_size() const {
  return _internal_flags_size();
}
inline void Option::clear_flags() {
  flags_.Clear();
}
inline ::prism::Flag* Option::mutable_flags(int index) {
  // @@protoc_insertion_point(field_mutable:prism.Option.flags)
  return flags_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::Flag >*
Option::mutable_flags() {
  // @@protoc_insertion_point(field_mutable_list:prism.Option.flags)
  return &flags_;
}
inline const ::prism::Flag& Option::_internal_flags(int index) const {
  return flags_.Get(index);
}
inline const ::prism::Flag& Option::flags(int index) const {
  // @@protoc_insertion_point(field_get:prism.Option.flags)
  return _internal_flags(index);
}
inline ::prism::Flag* Option::_internal_add_flags() {
  return flags_.Add();
}
inline ::prism::Flag* Option::add_flags() {
  // @@protoc_insertion_point(field_add:prism.Option.flags)
  return _internal_add_flags();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::Flag >&
Option::flags() const {
  // @@protoc_insertion_point(field_list:prism.Option.flags)
  return flags_;
}

// repeated .prism.IndexRange index_range = 2;
inline int Option::_internal_index_range_size() const {
  return index_range_.size();
}
inline int Option::index_range_size() const {
  return _internal_index_range_size();
}
inline void Option::clear_index_range() {
  index_range_.Clear();
}
inline ::prism::IndexRange* Option::mutable_index_range(int index) {
  // @@protoc_insertion_point(field_mutable:prism.Option.index_range)
  return index_range_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::IndexRange >*
Option::mutable_index_range() {
  // @@protoc_insertion_point(field_mutable_list:prism.Option.index_range)
  return &index_range_;
}
inline const ::prism::IndexRange& Option::_internal_index_range(int index) const {
  return index_range_.Get(index);
}
inline const ::prism::IndexRange& Option::index_range(int index) const {
  // @@protoc_insertion_point(field_get:prism.Option.index_range)
  return _internal_index_range(index);
}
inline ::prism::IndexRange* Option::_internal_add_index_range() {
  return index_range_.Add();
}
inline ::prism::IndexRange* Option::add_index_range() {
  // @@protoc_insertion_point(field_add:prism.Option.index_range)
  return _internal_add_index_range();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::IndexRange >&
Option::index_range() const {
  // @@protoc_insertion_point(field_list:prism.Option.index_range)
  return index_range_;
}

// repeated .prism.TensorShape tensor_shape = 3;
inline int Option::_internal_tensor_shape_size() const {
  return tensor_shape_.size();
}
inline int Option::tensor_shape_size() const {
  return _internal_tensor_shape_size();
}
inline void Option::clear_tensor_shape() {
  tensor_shape_.Clear();
}
inline ::prism::TensorShape* Option::mutable_tensor_shape(int index) {
  // @@protoc_insertion_point(field_mutable:prism.Option.tensor_shape)
  return tensor_shape_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::TensorShape >*
Option::mutable_tensor_shape() {
  // @@protoc_insertion_point(field_mutable_list:prism.Option.tensor_shape)
  return &tensor_shape_;
}
inline const ::prism::TensorShape& Option::_internal_tensor_shape(int index) const {
  return tensor_shape_.Get(index);
}
inline const ::prism::TensorShape& Option::tensor_shape(int index) const {
  // @@protoc_insertion_point(field_get:prism.Option.tensor_shape)
  return _internal_tensor_shape(index);
}
inline ::prism::TensorShape* Option::_internal_add_tensor_shape() {
  return tensor_shape_.Add();
}
inline ::prism::TensorShape* Option::add_tensor_shape() {
  // @@protoc_insertion_point(field_add:prism.Option.tensor_shape)
  return _internal_add_tensor_shape();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::TensorShape >&
Option::tensor_shape() const {
  // @@protoc_insertion_point(field_list:prism.Option.tensor_shape)
  return tensor_shape_;
}

// -------------------------------------------------------------------

// Flag

// string key = 1;
inline void Flag::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Flag::key() const {
  // @@protoc_insertion_point(field_get:prism.Flag.key)
  return _internal_key();
}
inline void Flag::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:prism.Flag.key)
}
inline std::string* Flag::mutable_key() {
  // @@protoc_insertion_point(field_mutable:prism.Flag.key)
  return _internal_mutable_key();
}
inline const std::string& Flag::_internal_key() const {
  return key_.Get();
}
inline void Flag::_internal_set_key(const std::string& value) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Flag::set_key(std::string&& value) {
  
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:prism.Flag.key)
}
inline void Flag::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:prism.Flag.key)
}
inline void Flag::set_key(const char* value,
    size_t size) {
  
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:prism.Flag.key)
}
inline std::string* Flag::_internal_mutable_key() {
  
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Flag::release_key() {
  // @@protoc_insertion_point(field_release:prism.Flag.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Flag::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:prism.Flag.key)
}
inline std::string* Flag::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:prism.Flag.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Flag::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    
  } else {
    
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prism.Flag.key)
}

// string value = 2;
inline void Flag::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Flag::value() const {
  // @@protoc_insertion_point(field_get:prism.Flag.value)
  return _internal_value();
}
inline void Flag::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:prism.Flag.value)
}
inline std::string* Flag::mutable_value() {
  // @@protoc_insertion_point(field_mutable:prism.Flag.value)
  return _internal_mutable_value();
}
inline const std::string& Flag::_internal_value() const {
  return value_.Get();
}
inline void Flag::_internal_set_value(const std::string& value) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Flag::set_value(std::string&& value) {
  
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:prism.Flag.value)
}
inline void Flag::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:prism.Flag.value)
}
inline void Flag::set_value(const char* value,
    size_t size) {
  
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:prism.Flag.value)
}
inline std::string* Flag::_internal_mutable_value() {
  
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Flag::release_value() {
  // @@protoc_insertion_point(field_release:prism.Flag.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Flag::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:prism.Flag.value)
}
inline std::string* Flag::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:prism.Flag.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Flag::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    
  } else {
    
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prism.Flag.value)
}

// -------------------------------------------------------------------

// IndexRange

// string index = 1;
inline void IndexRange::clear_index() {
  index_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& IndexRange::index() const {
  // @@protoc_insertion_point(field_get:prism.IndexRange.index)
  return _internal_index();
}
inline void IndexRange::set_index(const std::string& value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:prism.IndexRange.index)
}
inline std::string* IndexRange::mutable_index() {
  // @@protoc_insertion_point(field_mutable:prism.IndexRange.index)
  return _internal_mutable_index();
}
inline const std::string& IndexRange::_internal_index() const {
  return index_.Get();
}
inline void IndexRange::_internal_set_index(const std::string& value) {
  
  index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void IndexRange::set_index(std::string&& value) {
  
  index_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:prism.IndexRange.index)
}
inline void IndexRange::set_index(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:prism.IndexRange.index)
}
inline void IndexRange::set_index(const char* value,
    size_t size) {
  
  index_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:prism.IndexRange.index)
}
inline std::string* IndexRange::_internal_mutable_index() {
  
  return index_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* IndexRange::release_index() {
  // @@protoc_insertion_point(field_release:prism.IndexRange.index)
  return index_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void IndexRange::set_allocated_index(std::string* index) {
  if (index != nullptr) {
    
  } else {
    
  }
  index_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), index,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:prism.IndexRange.index)
}
inline std::string* IndexRange::unsafe_arena_release_index() {
  // @@protoc_insertion_point(field_unsafe_arena_release:prism.IndexRange.index)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return index_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void IndexRange::unsafe_arena_set_allocated_index(
    std::string* index) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (index != nullptr) {
    
  } else {
    
  }
  index_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      index, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prism.IndexRange.index)
}

// int32 range = 2;
inline void IndexRange::clear_range() {
  range_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexRange::_internal_range() const {
  return range_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 IndexRange::range() const {
  // @@protoc_insertion_point(field_get:prism.IndexRange.range)
  return _internal_range();
}
inline void IndexRange::_internal_set_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  range_ = value;
}
inline void IndexRange::set_range(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_range(value);
  // @@protoc_insertion_point(field_set:prism.IndexRange.range)
}

// -------------------------------------------------------------------

// TensorShape

// string tensor_name = 1;
inline void TensorShape::clear_tensor_name() {
  tensor_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TensorShape::tensor_name() const {
  // @@protoc_insertion_point(field_get:prism.TensorShape.tensor_name)
  return _internal_tensor_name();
}
inline void TensorShape::set_tensor_name(const std::string& value) {
  _internal_set_tensor_name(value);
  // @@protoc_insertion_point(field_set:prism.TensorShape.tensor_name)
}
inline std::string* TensorShape::mutable_tensor_name() {
  // @@protoc_insertion_point(field_mutable:prism.TensorShape.tensor_name)
  return _internal_mutable_tensor_name();
}
inline const std::string& TensorShape::_internal_tensor_name() const {
  return tensor_name_.Get();
}
inline void TensorShape::_internal_set_tensor_name(const std::string& value) {
  
  tensor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TensorShape::set_tensor_name(std::string&& value) {
  
  tensor_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:prism.TensorShape.tensor_name)
}
inline void TensorShape::set_tensor_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tensor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:prism.TensorShape.tensor_name)
}
inline void TensorShape::set_tensor_name(const char* value,
    size_t size) {
  
  tensor_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:prism.TensorShape.tensor_name)
}
inline std::string* TensorShape::_internal_mutable_tensor_name() {
  
  return tensor_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TensorShape::release_tensor_name() {
  // @@protoc_insertion_point(field_release:prism.TensorShape.tensor_name)
  return tensor_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TensorShape::set_allocated_tensor_name(std::string* tensor_name) {
  if (tensor_name != nullptr) {
    
  } else {
    
  }
  tensor_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tensor_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:prism.TensorShape.tensor_name)
}
inline std::string* TensorShape::unsafe_arena_release_tensor_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:prism.TensorShape.tensor_name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return tensor_name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TensorShape::unsafe_arena_set_allocated_tensor_name(
    std::string* tensor_name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tensor_name != nullptr) {
    
  } else {
    
  }
  tensor_name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tensor_name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prism.TensorShape.tensor_name)
}

// repeated int32 shape = 2;
inline int TensorShape::_internal_shape_size() const {
  return shape_.size();
}
inline int TensorShape::shape_size() const {
  return _internal_shape_size();
}
inline void TensorShape::clear_shape() {
  shape_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorShape::_internal_shape(int index) const {
  return shape_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TensorShape::shape(int index) const {
  // @@protoc_insertion_point(field_get:prism.TensorShape.shape)
  return _internal_shape(index);
}
inline void TensorShape::set_shape(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Set(index, value);
  // @@protoc_insertion_point(field_set:prism.TensorShape.shape)
}
inline void TensorShape::_internal_add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  shape_.Add(value);
}
inline void TensorShape::add_shape(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_shape(value);
  // @@protoc_insertion_point(field_add:prism.TensorShape.shape)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorShape::_internal_shape() const {
  return shape_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
TensorShape::shape() const {
  // @@protoc_insertion_point(field_list:prism.TensorShape.shape)
  return _internal_shape();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorShape::_internal_mutable_shape() {
  return &shape_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
TensorShape::mutable_shape() {
  // @@protoc_insertion_point(field_mutable_list:prism.TensorShape.shape)
  return _internal_mutable_shape();
}

// string type = 3;
inline void TensorShape::clear_type() {
  type_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& TensorShape::type() const {
  // @@protoc_insertion_point(field_get:prism.TensorShape.type)
  return _internal_type();
}
inline void TensorShape::set_type(const std::string& value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:prism.TensorShape.type)
}
inline std::string* TensorShape::mutable_type() {
  // @@protoc_insertion_point(field_mutable:prism.TensorShape.type)
  return _internal_mutable_type();
}
inline const std::string& TensorShape::_internal_type() const {
  return type_.Get();
}
inline void TensorShape::_internal_set_type(const std::string& value) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TensorShape::set_type(std::string&& value) {
  
  type_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:prism.TensorShape.type)
}
inline void TensorShape::set_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:prism.TensorShape.type)
}
inline void TensorShape::set_type(const char* value,
    size_t size) {
  
  type_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:prism.TensorShape.type)
}
inline std::string* TensorShape::_internal_mutable_type() {
  
  return type_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TensorShape::release_type() {
  // @@protoc_insertion_point(field_release:prism.TensorShape.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TensorShape::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:prism.TensorShape.type)
}
inline std::string* TensorShape::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_unsafe_arena_release:prism.TensorShape.type)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return type_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TensorShape::unsafe_arena_set_allocated_type(
    std::string* type) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (type != nullptr) {
    
  } else {
    
  }
  type_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      type, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prism.TensorShape.type)
}

// -------------------------------------------------------------------

// ExplGraph

// repeated .prism.ExplGraphGoal goals = 1;
inline int ExplGraph::_internal_goals_size() const {
  return goals_.size();
}
inline int ExplGraph::goals_size() const {
  return _internal_goals_size();
}
inline void ExplGraph::clear_goals() {
  goals_.Clear();
}
inline ::prism::ExplGraphGoal* ExplGraph::mutable_goals(int index) {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraph.goals)
  return goals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::ExplGraphGoal >*
ExplGraph::mutable_goals() {
  // @@protoc_insertion_point(field_mutable_list:prism.ExplGraph.goals)
  return &goals_;
}
inline const ::prism::ExplGraphGoal& ExplGraph::_internal_goals(int index) const {
  return goals_.Get(index);
}
inline const ::prism::ExplGraphGoal& ExplGraph::goals(int index) const {
  // @@protoc_insertion_point(field_get:prism.ExplGraph.goals)
  return _internal_goals(index);
}
inline ::prism::ExplGraphGoal* ExplGraph::_internal_add_goals() {
  return goals_.Add();
}
inline ::prism::ExplGraphGoal* ExplGraph::add_goals() {
  // @@protoc_insertion_point(field_add:prism.ExplGraph.goals)
  return _internal_add_goals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::ExplGraphGoal >&
ExplGraph::goals() const {
  // @@protoc_insertion_point(field_list:prism.ExplGraph.goals)
  return goals_;
}

// repeated .prism.RankRoot root_list = 2;
inline int ExplGraph::_internal_root_list_size() const {
  return root_list_.size();
}
inline int ExplGraph::root_list_size() const {
  return _internal_root_list_size();
}
inline void ExplGraph::clear_root_list() {
  root_list_.Clear();
}
inline ::prism::RankRoot* ExplGraph::mutable_root_list(int index) {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraph.root_list)
  return root_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::RankRoot >*
ExplGraph::mutable_root_list() {
  // @@protoc_insertion_point(field_mutable_list:prism.ExplGraph.root_list)
  return &root_list_;
}
inline const ::prism::RankRoot& ExplGraph::_internal_root_list(int index) const {
  return root_list_.Get(index);
}
inline const ::prism::RankRoot& ExplGraph::root_list(int index) const {
  // @@protoc_insertion_point(field_get:prism.ExplGraph.root_list)
  return _internal_root_list(index);
}
inline ::prism::RankRoot* ExplGraph::_internal_add_root_list() {
  return root_list_.Add();
}
inline ::prism::RankRoot* ExplGraph::add_root_list() {
  // @@protoc_insertion_point(field_add:prism.ExplGraph.root_list)
  return _internal_add_root_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::RankRoot >&
ExplGraph::root_list() const {
  // @@protoc_insertion_point(field_list:prism.ExplGraph.root_list)
  return root_list_;
}

// -------------------------------------------------------------------

// ExplGraphGoal

// .prism.ExplGraphNode node = 1;
inline bool ExplGraphGoal::_internal_has_node() const {
  return this != internal_default_instance() && node_ != nullptr;
}
inline bool ExplGraphGoal::has_node() const {
  return _internal_has_node();
}
inline void ExplGraphGoal::clear_node() {
  if (GetArena() == nullptr && node_ != nullptr) {
    delete node_;
  }
  node_ = nullptr;
}
inline const ::prism::ExplGraphNode& ExplGraphGoal::_internal_node() const {
  const ::prism::ExplGraphNode* p = node_;
  return p != nullptr ? *p : *reinterpret_cast<const ::prism::ExplGraphNode*>(
      &::prism::_ExplGraphNode_default_instance_);
}
inline const ::prism::ExplGraphNode& ExplGraphGoal::node() const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphGoal.node)
  return _internal_node();
}
inline void ExplGraphGoal::unsafe_arena_set_allocated_node(
    ::prism::ExplGraphNode* node) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node_);
  }
  node_ = node;
  if (node) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prism.ExplGraphGoal.node)
}
inline ::prism::ExplGraphNode* ExplGraphGoal::release_node() {
  auto temp = unsafe_arena_release_node();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::prism::ExplGraphNode* ExplGraphGoal::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:prism.ExplGraphGoal.node)
  
  ::prism::ExplGraphNode* temp = node_;
  node_ = nullptr;
  return temp;
}
inline ::prism::ExplGraphNode* ExplGraphGoal::_internal_mutable_node() {
  
  if (node_ == nullptr) {
    auto* p = CreateMaybeMessage<::prism::ExplGraphNode>(GetArena());
    node_ = p;
  }
  return node_;
}
inline ::prism::ExplGraphNode* ExplGraphGoal::mutable_node() {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraphGoal.node)
  return _internal_mutable_node();
}
inline void ExplGraphGoal::set_allocated_node(::prism::ExplGraphNode* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete node_;
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(node);
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    
  } else {
    
  }
  node_ = node;
  // @@protoc_insertion_point(field_set_allocated:prism.ExplGraphGoal.node)
}

// repeated .prism.ExplGraphPath paths = 2;
inline int ExplGraphGoal::_internal_paths_size() const {
  return paths_.size();
}
inline int ExplGraphGoal::paths_size() const {
  return _internal_paths_size();
}
inline void ExplGraphGoal::clear_paths() {
  paths_.Clear();
}
inline ::prism::ExplGraphPath* ExplGraphGoal::mutable_paths(int index) {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraphGoal.paths)
  return paths_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::ExplGraphPath >*
ExplGraphGoal::mutable_paths() {
  // @@protoc_insertion_point(field_mutable_list:prism.ExplGraphGoal.paths)
  return &paths_;
}
inline const ::prism::ExplGraphPath& ExplGraphGoal::_internal_paths(int index) const {
  return paths_.Get(index);
}
inline const ::prism::ExplGraphPath& ExplGraphGoal::paths(int index) const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphGoal.paths)
  return _internal_paths(index);
}
inline ::prism::ExplGraphPath* ExplGraphGoal::_internal_add_paths() {
  return paths_.Add();
}
inline ::prism::ExplGraphPath* ExplGraphGoal::add_paths() {
  // @@protoc_insertion_point(field_add:prism.ExplGraphGoal.paths)
  return _internal_add_paths();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::ExplGraphPath >&
ExplGraphGoal::paths() const {
  // @@protoc_insertion_point(field_list:prism.ExplGraphGoal.paths)
  return paths_;
}

// -------------------------------------------------------------------

// ExplGraphPath

// repeated .prism.ExplGraphNode nodes = 1;
inline int ExplGraphPath::_internal_nodes_size() const {
  return nodes_.size();
}
inline int ExplGraphPath::nodes_size() const {
  return _internal_nodes_size();
}
inline void ExplGraphPath::clear_nodes() {
  nodes_.Clear();
}
inline ::prism::ExplGraphNode* ExplGraphPath::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraphPath.nodes)
  return nodes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::ExplGraphNode >*
ExplGraphPath::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:prism.ExplGraphPath.nodes)
  return &nodes_;
}
inline const ::prism::ExplGraphNode& ExplGraphPath::_internal_nodes(int index) const {
  return nodes_.Get(index);
}
inline const ::prism::ExplGraphNode& ExplGraphPath::nodes(int index) const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphPath.nodes)
  return _internal_nodes(index);
}
inline ::prism::ExplGraphNode* ExplGraphPath::_internal_add_nodes() {
  return nodes_.Add();
}
inline ::prism::ExplGraphNode* ExplGraphPath::add_nodes() {
  // @@protoc_insertion_point(field_add:prism.ExplGraphPath.nodes)
  return _internal_add_nodes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::ExplGraphNode >&
ExplGraphPath::nodes() const {
  // @@protoc_insertion_point(field_list:prism.ExplGraphPath.nodes)
  return nodes_;
}

// repeated .prism.SwIns prob_switches = 2;
inline int ExplGraphPath::_internal_prob_switches_size() const {
  return prob_switches_.size();
}
inline int ExplGraphPath::prob_switches_size() const {
  return _internal_prob_switches_size();
}
inline void ExplGraphPath::clear_prob_switches() {
  prob_switches_.Clear();
}
inline ::prism::SwIns* ExplGraphPath::mutable_prob_switches(int index) {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraphPath.prob_switches)
  return prob_switches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >*
ExplGraphPath::mutable_prob_switches() {
  // @@protoc_insertion_point(field_mutable_list:prism.ExplGraphPath.prob_switches)
  return &prob_switches_;
}
inline const ::prism::SwIns& ExplGraphPath::_internal_prob_switches(int index) const {
  return prob_switches_.Get(index);
}
inline const ::prism::SwIns& ExplGraphPath::prob_switches(int index) const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphPath.prob_switches)
  return _internal_prob_switches(index);
}
inline ::prism::SwIns* ExplGraphPath::_internal_add_prob_switches() {
  return prob_switches_.Add();
}
inline ::prism::SwIns* ExplGraphPath::add_prob_switches() {
  // @@protoc_insertion_point(field_add:prism.ExplGraphPath.prob_switches)
  return _internal_add_prob_switches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >&
ExplGraphPath::prob_switches() const {
  // @@protoc_insertion_point(field_list:prism.ExplGraphPath.prob_switches)
  return prob_switches_;
}

// repeated .prism.SwIns tensor_switches = 3;
inline int ExplGraphPath::_internal_tensor_switches_size() const {
  return tensor_switches_.size();
}
inline int ExplGraphPath::tensor_switches_size() const {
  return _internal_tensor_switches_size();
}
inline void ExplGraphPath::clear_tensor_switches() {
  tensor_switches_.Clear();
}
inline ::prism::SwIns* ExplGraphPath::mutable_tensor_switches(int index) {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraphPath.tensor_switches)
  return tensor_switches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >*
ExplGraphPath::mutable_tensor_switches() {
  // @@protoc_insertion_point(field_mutable_list:prism.ExplGraphPath.tensor_switches)
  return &tensor_switches_;
}
inline const ::prism::SwIns& ExplGraphPath::_internal_tensor_switches(int index) const {
  return tensor_switches_.Get(index);
}
inline const ::prism::SwIns& ExplGraphPath::tensor_switches(int index) const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphPath.tensor_switches)
  return _internal_tensor_switches(index);
}
inline ::prism::SwIns* ExplGraphPath::_internal_add_tensor_switches() {
  return tensor_switches_.Add();
}
inline ::prism::SwIns* ExplGraphPath::add_tensor_switches() {
  // @@protoc_insertion_point(field_add:prism.ExplGraphPath.tensor_switches)
  return _internal_add_tensor_switches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >&
ExplGraphPath::tensor_switches() const {
  // @@protoc_insertion_point(field_list:prism.ExplGraphPath.tensor_switches)
  return tensor_switches_;
}

// repeated .prism.SwIns operators = 4;
inline int ExplGraphPath::_internal_operators_size() const {
  return operators_.size();
}
inline int ExplGraphPath::operators_size() const {
  return _internal_operators_size();
}
inline void ExplGraphPath::clear_operators() {
  operators_.Clear();
}
inline ::prism::SwIns* ExplGraphPath::mutable_operators(int index) {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraphPath.operators)
  return operators_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >*
ExplGraphPath::mutable_operators() {
  // @@protoc_insertion_point(field_mutable_list:prism.ExplGraphPath.operators)
  return &operators_;
}
inline const ::prism::SwIns& ExplGraphPath::_internal_operators(int index) const {
  return operators_.Get(index);
}
inline const ::prism::SwIns& ExplGraphPath::operators(int index) const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphPath.operators)
  return _internal_operators(index);
}
inline ::prism::SwIns* ExplGraphPath::_internal_add_operators() {
  return operators_.Add();
}
inline ::prism::SwIns* ExplGraphPath::add_operators() {
  // @@protoc_insertion_point(field_add:prism.ExplGraphPath.operators)
  return _internal_add_operators();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >&
ExplGraphPath::operators() const {
  // @@protoc_insertion_point(field_list:prism.ExplGraphPath.operators)
  return operators_;
}

// repeated .prism.SwIns layers = 5;
inline int ExplGraphPath::_internal_layers_size() const {
  return layers_.size();
}
inline int ExplGraphPath::layers_size() const {
  return _internal_layers_size();
}
inline void ExplGraphPath::clear_layers() {
  layers_.Clear();
}
inline ::prism::SwIns* ExplGraphPath::mutable_layers(int index) {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraphPath.layers)
  return layers_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >*
ExplGraphPath::mutable_layers() {
  // @@protoc_insertion_point(field_mutable_list:prism.ExplGraphPath.layers)
  return &layers_;
}
inline const ::prism::SwIns& ExplGraphPath::_internal_layers(int index) const {
  return layers_.Get(index);
}
inline const ::prism::SwIns& ExplGraphPath::layers(int index) const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphPath.layers)
  return _internal_layers(index);
}
inline ::prism::SwIns* ExplGraphPath::_internal_add_layers() {
  return layers_.Add();
}
inline ::prism::SwIns* ExplGraphPath::add_layers() {
  // @@protoc_insertion_point(field_add:prism.ExplGraphPath.layers)
  return _internal_add_layers();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::SwIns >&
ExplGraphPath::layers() const {
  // @@protoc_insertion_point(field_list:prism.ExplGraphPath.layers)
  return layers_;
}

// -------------------------------------------------------------------

// ExplGraphNode

// int32 id = 1;
inline void ExplGraphNode::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExplGraphNode::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExplGraphNode::id() const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphNode.id)
  return _internal_id();
}
inline void ExplGraphNode::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void ExplGraphNode::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:prism.ExplGraphNode.id)
}

// int32 sorted_id = 2;
inline void ExplGraphNode::clear_sorted_id() {
  sorted_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExplGraphNode::_internal_sorted_id() const {
  return sorted_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ExplGraphNode::sorted_id() const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphNode.sorted_id)
  return _internal_sorted_id();
}
inline void ExplGraphNode::_internal_set_sorted_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sorted_id_ = value;
}
inline void ExplGraphNode::set_sorted_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sorted_id(value);
  // @@protoc_insertion_point(field_set:prism.ExplGraphNode.sorted_id)
}

// .prism.GoalTerm goal = 3;
inline bool ExplGraphNode::_internal_has_goal() const {
  return this != internal_default_instance() && goal_ != nullptr;
}
inline bool ExplGraphNode::has_goal() const {
  return _internal_has_goal();
}
inline void ExplGraphNode::clear_goal() {
  if (GetArena() == nullptr && goal_ != nullptr) {
    delete goal_;
  }
  goal_ = nullptr;
}
inline const ::prism::GoalTerm& ExplGraphNode::_internal_goal() const {
  const ::prism::GoalTerm* p = goal_;
  return p != nullptr ? *p : *reinterpret_cast<const ::prism::GoalTerm*>(
      &::prism::_GoalTerm_default_instance_);
}
inline const ::prism::GoalTerm& ExplGraphNode::goal() const {
  // @@protoc_insertion_point(field_get:prism.ExplGraphNode.goal)
  return _internal_goal();
}
inline void ExplGraphNode::unsafe_arena_set_allocated_goal(
    ::prism::GoalTerm* goal) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(goal_);
  }
  goal_ = goal;
  if (goal) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prism.ExplGraphNode.goal)
}
inline ::prism::GoalTerm* ExplGraphNode::release_goal() {
  auto temp = unsafe_arena_release_goal();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::prism::GoalTerm* ExplGraphNode::unsafe_arena_release_goal() {
  // @@protoc_insertion_point(field_release:prism.ExplGraphNode.goal)
  
  ::prism::GoalTerm* temp = goal_;
  goal_ = nullptr;
  return temp;
}
inline ::prism::GoalTerm* ExplGraphNode::_internal_mutable_goal() {
  
  if (goal_ == nullptr) {
    auto* p = CreateMaybeMessage<::prism::GoalTerm>(GetArena());
    goal_ = p;
  }
  return goal_;
}
inline ::prism::GoalTerm* ExplGraphNode::mutable_goal() {
  // @@protoc_insertion_point(field_mutable:prism.ExplGraphNode.goal)
  return _internal_mutable_goal();
}
inline void ExplGraphNode::set_allocated_goal(::prism::GoalTerm* goal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete goal_;
  }
  if (goal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(goal);
    if (message_arena != submessage_arena) {
      goal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, goal, submessage_arena);
    }
    
  } else {
    
  }
  goal_ = goal;
  // @@protoc_insertion_point(field_set_allocated:prism.ExplGraphNode.goal)
}

// -------------------------------------------------------------------

// GoalTerm

// string name = 1;
inline void GoalTerm::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& GoalTerm::name() const {
  // @@protoc_insertion_point(field_get:prism.GoalTerm.name)
  return _internal_name();
}
inline void GoalTerm::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:prism.GoalTerm.name)
}
inline std::string* GoalTerm::mutable_name() {
  // @@protoc_insertion_point(field_mutable:prism.GoalTerm.name)
  return _internal_mutable_name();
}
inline const std::string& GoalTerm::_internal_name() const {
  return name_.Get();
}
inline void GoalTerm::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GoalTerm::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:prism.GoalTerm.name)
}
inline void GoalTerm::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:prism.GoalTerm.name)
}
inline void GoalTerm::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:prism.GoalTerm.name)
}
inline std::string* GoalTerm::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GoalTerm::release_name() {
  // @@protoc_insertion_point(field_release:prism.GoalTerm.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GoalTerm::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:prism.GoalTerm.name)
}
inline std::string* GoalTerm::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:prism.GoalTerm.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GoalTerm::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prism.GoalTerm.name)
}

// repeated string args = 2;
inline int GoalTerm::_internal_args_size() const {
  return args_.size();
}
inline int GoalTerm::args_size() const {
  return _internal_args_size();
}
inline void GoalTerm::clear_args() {
  args_.Clear();
}
inline std::string* GoalTerm::add_args() {
  // @@protoc_insertion_point(field_add_mutable:prism.GoalTerm.args)
  return _internal_add_args();
}
inline const std::string& GoalTerm::_internal_args(int index) const {
  return args_.Get(index);
}
inline const std::string& GoalTerm::args(int index) const {
  // @@protoc_insertion_point(field_get:prism.GoalTerm.args)
  return _internal_args(index);
}
inline std::string* GoalTerm::mutable_args(int index) {
  // @@protoc_insertion_point(field_mutable:prism.GoalTerm.args)
  return args_.Mutable(index);
}
inline void GoalTerm::set_args(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:prism.GoalTerm.args)
  args_.Mutable(index)->assign(value);
}
inline void GoalTerm::set_args(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:prism.GoalTerm.args)
  args_.Mutable(index)->assign(std::move(value));
}
inline void GoalTerm::set_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:prism.GoalTerm.args)
}
inline void GoalTerm::set_args(int index, const char* value, size_t size) {
  args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:prism.GoalTerm.args)
}
inline std::string* GoalTerm::_internal_add_args() {
  return args_.Add();
}
inline void GoalTerm::add_args(const std::string& value) {
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:prism.GoalTerm.args)
}
inline void GoalTerm::add_args(std::string&& value) {
  args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:prism.GoalTerm.args)
}
inline void GoalTerm::add_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:prism.GoalTerm.args)
}
inline void GoalTerm::add_args(const char* value, size_t size) {
  args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:prism.GoalTerm.args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
GoalTerm::args() const {
  // @@protoc_insertion_point(field_list:prism.GoalTerm.args)
  return args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
GoalTerm::mutable_args() {
  // @@protoc_insertion_point(field_mutable_list:prism.GoalTerm.args)
  return &args_;
}

// -------------------------------------------------------------------

// SwIns

// int32 id = 1;
inline void SwIns::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwIns::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SwIns::id() const {
  // @@protoc_insertion_point(field_get:prism.SwIns.id)
  return _internal_id();
}
inline void SwIns::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void SwIns::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:prism.SwIns.id)
}

// string name = 2;
inline void SwIns::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& SwIns::name() const {
  // @@protoc_insertion_point(field_get:prism.SwIns.name)
  return _internal_name();
}
inline void SwIns::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:prism.SwIns.name)
}
inline std::string* SwIns::mutable_name() {
  // @@protoc_insertion_point(field_mutable:prism.SwIns.name)
  return _internal_mutable_name();
}
inline const std::string& SwIns::_internal_name() const {
  return name_.Get();
}
inline void SwIns::_internal_set_name(const std::string& value) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void SwIns::set_name(std::string&& value) {
  
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:prism.SwIns.name)
}
inline void SwIns::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:prism.SwIns.name)
}
inline void SwIns::set_name(const char* value,
    size_t size) {
  
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:prism.SwIns.name)
}
inline std::string* SwIns::_internal_mutable_name() {
  
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* SwIns::release_name() {
  // @@protoc_insertion_point(field_release:prism.SwIns.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SwIns::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:prism.SwIns.name)
}
inline std::string* SwIns::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:prism.SwIns.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void SwIns::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    
  } else {
    
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:prism.SwIns.name)
}

// repeated string values = 3;
inline int SwIns::_internal_values_size() const {
  return values_.size();
}
inline int SwIns::values_size() const {
  return _internal_values_size();
}
inline void SwIns::clear_values() {
  values_.Clear();
}
inline std::string* SwIns::add_values() {
  // @@protoc_insertion_point(field_add_mutable:prism.SwIns.values)
  return _internal_add_values();
}
inline const std::string& SwIns::_internal_values(int index) const {
  return values_.Get(index);
}
inline const std::string& SwIns::values(int index) const {
  // @@protoc_insertion_point(field_get:prism.SwIns.values)
  return _internal_values(index);
}
inline std::string* SwIns::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:prism.SwIns.values)
  return values_.Mutable(index);
}
inline void SwIns::set_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:prism.SwIns.values)
  values_.Mutable(index)->assign(value);
}
inline void SwIns::set_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:prism.SwIns.values)
  values_.Mutable(index)->assign(std::move(value));
}
inline void SwIns::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:prism.SwIns.values)
}
inline void SwIns::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:prism.SwIns.values)
}
inline std::string* SwIns::_internal_add_values() {
  return values_.Add();
}
inline void SwIns::add_values(const std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:prism.SwIns.values)
}
inline void SwIns::add_values(std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:prism.SwIns.values)
}
inline void SwIns::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:prism.SwIns.values)
}
inline void SwIns::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:prism.SwIns.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SwIns::values() const {
  // @@protoc_insertion_point(field_list:prism.SwIns.values)
  return values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SwIns::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:prism.SwIns.values)
  return &values_;
}

// float inside = 4;
inline void SwIns::clear_inside() {
  inside_ = 0;
}
inline float SwIns::_internal_inside() const {
  return inside_;
}
inline float SwIns::inside() const {
  // @@protoc_insertion_point(field_get:prism.SwIns.inside)
  return _internal_inside();
}
inline void SwIns::_internal_set_inside(float value) {
  
  inside_ = value;
}
inline void SwIns::set_inside(float value) {
  _internal_set_inside(value);
  // @@protoc_insertion_point(field_set:prism.SwIns.inside)
}

// .prism.SwType sw_type = 5;
inline void SwIns::clear_sw_type() {
  sw_type_ = 0;
}
inline ::prism::SwType SwIns::_internal_sw_type() const {
  return static_cast< ::prism::SwType >(sw_type_);
}
inline ::prism::SwType SwIns::sw_type() const {
  // @@protoc_insertion_point(field_get:prism.SwIns.sw_type)
  return _internal_sw_type();
}
inline void SwIns::_internal_set_sw_type(::prism::SwType value) {
  
  sw_type_ = value;
}
inline void SwIns::set_sw_type(::prism::SwType value) {
  _internal_set_sw_type(value);
  // @@protoc_insertion_point(field_set:prism.SwIns.sw_type)
}

// -------------------------------------------------------------------

// Root

// int32 id = 1;
inline void Root::clear_id() {
  id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Root::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Root::id() const {
  // @@protoc_insertion_point(field_get:prism.Root.id)
  return _internal_id();
}
inline void Root::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  id_ = value;
}
inline void Root::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:prism.Root.id)
}

// int32 sorted_id = 2;
inline void Root::clear_sorted_id() {
  sorted_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Root::_internal_sorted_id() const {
  return sorted_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Root::sorted_id() const {
  // @@protoc_insertion_point(field_get:prism.Root.sorted_id)
  return _internal_sorted_id();
}
inline void Root::_internal_set_sorted_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sorted_id_ = value;
}
inline void Root::set_sorted_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sorted_id(value);
  // @@protoc_insertion_point(field_set:prism.Root.sorted_id)
}

// -------------------------------------------------------------------

// RankRoot

// repeated .prism.Root roots = 1;
inline int RankRoot::_internal_roots_size() const {
  return roots_.size();
}
inline int RankRoot::roots_size() const {
  return _internal_roots_size();
}
inline void RankRoot::clear_roots() {
  roots_.Clear();
}
inline ::prism::Root* RankRoot::mutable_roots(int index) {
  // @@protoc_insertion_point(field_mutable:prism.RankRoot.roots)
  return roots_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::Root >*
RankRoot::mutable_roots() {
  // @@protoc_insertion_point(field_mutable_list:prism.RankRoot.roots)
  return &roots_;
}
inline const ::prism::Root& RankRoot::_internal_roots(int index) const {
  return roots_.Get(index);
}
inline const ::prism::Root& RankRoot::roots(int index) const {
  // @@protoc_insertion_point(field_get:prism.RankRoot.roots)
  return _internal_roots(index);
}
inline ::prism::Root* RankRoot::_internal_add_roots() {
  return roots_.Add();
}
inline ::prism::Root* RankRoot::add_roots() {
  // @@protoc_insertion_point(field_add:prism.RankRoot.roots)
  return _internal_add_roots();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::prism::Root >&
RankRoot::roots() const {
  // @@protoc_insertion_point(field_list:prism.RankRoot.roots)
  return roots_;
}

// int32 count = 2;
inline void RankRoot::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankRoot::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankRoot::count() const {
  // @@protoc_insertion_point(field_get:prism.RankRoot.count)
  return _internal_count();
}
inline void RankRoot::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void RankRoot::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:prism.RankRoot.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace prism

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::prism::SwType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::prism::SwType>() {
  return ::prism::SwType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_expl_2eproto
