%%%%
%%%%  Parameter learning of a PCFG from prefix substrings
%%%%  --- prefix_pcfg_learn.psm
%%%%
%%%%  Copyright (C) 2014-2015
%%%%    Sato Laboratory, Dept. of Computer Science,
%%%%    Tokyo Institute of Technology
%%%%

%--------------------------------------
%%  Parameter learning of the PCFG from randomly sampled 100 prefixes with length less than 3
%%
%%  Lerning with the EM algorithm
%%  ?- prism(prefix_pcfg_learn),learn_with_em(100,3). 
%%  Lerning with the VT algorithm
%%  ?- prism(prefix_pcfg_learn),learn_with_vt(100,3). 
%% 
%%--------------------------------------

%%
%% Declarations and other settings:
%%

% To obtain cyclic explanations, currently we need to turn off
% the error_on_cycle flag:
:- set_prism_flag(error_on_cycle,off).

% We define the grammar-dependent part of our PCFG in rule.pl and include it here:
:- include('rule').

%%
%% Modeling part:
%%   Here we take on two models depending on the purpose
%%   -- one for prefix parsing and learning, another for sampling.
%%

%% For parsing and learning:

prefix_pcfg(L) :-           % L is a ground list
   start_symbol(S),
   prefix_pcfg([S],L-[]).

prefix_pcfg([A|R],L0-L2) :- % L0 ground, L2 variable when called
    ( get_values(A,_)
      -> msw(A,RHS),        % rule A->RHS selected
         prefix_pcfg(RHS,L0-L1)
    ;  L0=[A|L1]
    ),
    ( L1=[] -> L2=[]        % prefix is derived
    ; prefix_pcfg(R,L1-L2)
    ).
prefix_pcfg([],L1-L1).

%% For sampling: 

pcfg(L) :- start_symbol(S),pcfg(S,L-[]).
pcfg(LHS,L0-L1) :-
  ( get_values(LHS,_) -> msw(LHS,RHS),proj(RHS,L0-L1)
  ; L0 = [LHS|L1]
  ).

proj([],L-L).
proj([X|Xs],L0-L1) :-
  pcfg(X,L0-L2),proj(Xs,L2-L1).

%%
%% Utility part:
%%

% Top goal specification for batch execution by the upprism command:
prism_main([em]) :- learn_with_em(100,3),show_sw.
prism_main([vt]) :- learn_with_vt(100,3),show_sw.

% Batch routine for EM learning
learn_with_em(N,Len) :-
    set_sw(s, [0.4, 0.3, 0.3]),
    get_samples(N,pcfg(_),S),
    maplist(X,Y,(X=pcfg(L),trunc_prefix(L,P,Len),Y=prefix_pcfg(P)),S,Gs),
    get_prism_flag(learn_mode,M),
    set_prism_flag(learn_mode,ml),
    lin_learn(Gs),
    set_prism_flag(learn_mode,M).

% Batch routine for Viterbi training
learn_with_vt(N,Len) :-
    set_sw(s, [0.4, 0.3, 0.3]),
    get_samples(N,pcfg(_),S),
    maplist(X,Y,(X=pcfg(L),trunc_prefix(L,P,Len),Y=prefix_pcfg(P)),S,Gs),
    get_prism_flag(learn_mode,M),
    set_prism_flag(learn_mode,ml_vt),
    lin_learn(Gs),
    set_prism_flag(learn_mode,M).

% Generate a prefix string P no longer than N from a sentence S
trunc_prefix(S,S,N) :- length(S,L),L < N.
trunc_prefix(S,P,N) :- length(P,N),append(P,_,S).
